@page "/"
@using Humanizer
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using Tasker.Web.Data.Entities
@using Tasker.Web.Data.Services
@inject TasksService TasksService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager nav
@inject ISnackbar snackbar
@rendermode InteractiveServer
<MudScrollToTop>
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.KeyboardArrowUp" />
</MudScrollToTop>
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="4" Class="p-4">
        <MudText Typo="Typo.h4" GutterBottom="true" Align="Align.Center">Úkoly a testy</MudText>
        <MudStack Row Wrap="Wrap.Wrap" AlignItems="AlignItems.Center">
            <MudSpacer />
            <div>
                <MudDatePicker Clearable DateChanged="Filter" Variant="Variant.Outlined" Date="DateFilter" Label="Filtr" />

            </div>
            <div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/Add">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" /> Přidat zadání
                </MudButton>

            </div>
            <MudTooltip Text="Zobrazit historii">
                <MudIconButton Icon="@Icons.Material.Filled.History" OnClick="ShowHistory" Color="@(ShowHistoryActive ? Color.Info : Color.Default)"></MudIconButton>
            </MudTooltip>
        </MudStack>

        <MudTable Loading="Loading" Items="SchoolTasks" Hover="true" Bordered="true">
            <HeaderContent>
                <MudTh>Předmět</MudTh>
                <MudTh>Typ</MudTh>
                <MudTh>Nadpis</MudTh>
                <MudTh>Zadání</MudTh>
                <MudTh>Čas splnění</MudTh>
                <MudTh>Akce</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Předmět">
                    <MudTooltip Text="@context.Subject.FullName">
                        @(context.Subject.GroupId == Guid.Empty ? context.Subject.ShortName : context.Subject.ShortName + " " + context.Subject.Group.Name)
                    </MudTooltip>
                    @if ((context.Deadline.ToDateTime(TimeOnly.MinValue).Date - DateTime.Now.Date).TotalDays <= 1)
                    {
                        bool Done = false;
                        if ((context.Deadline == DateOnly.FromDateTime(DateTime.Now) && DateTime.Now.Hour >= 16) || context.Deadline < DateOnly.FromDateTime(DateTime.Now))
                        {
                            Done = true;
                        }

                        <MudTooltip Text="@(Done ? "Hotovo" : "Brzy")">
                            <MudIcon Icon="@(Done ? Icons.Material.Filled.Done : Icons.Material.Filled.Warning)"
                            Color="@(Done ? Color.Success : Color.Error)"
                            Style="margin-left: 5px; vertical-align: middle;" />
                        </MudTooltip>
                    }
                </MudTd>
                <MudTd DataLabel="Typ">
                    <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" Label="true" Text="@context.TaskType.Name" />
                </MudTd>
                <MudTd DataLabel="Nadpis">
                    @context.Name
                </MudTd>
                <MudTd DataLabel="Zadání">
                    @context.Description

                </MudTd>
                <MudTd DataLabel="Čas splnění">
                    @(context.Deadline.ToString("D", CultureInfo.GetCultureInfo("cs-CZ")))
                    <code>
                        <MudText Typo="Typo.caption">(@(context.Deadline.Humanize()))</MudText>
                    </code>
                </MudTd>
                <MudTd DataLabel="Akce">
                    <MudStack Row Wrap="Wrap.Wrap" Spacing="1">
                        <MudButton Disabled="ShowHistoryActive" Variant="Variant.Outlined" Color="Color.Info" OnClick="() => EditTask(context.Id)">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" />
                        </MudButton>
                        <MudButton Disabled="!IsLogin || ShowHistoryActive" Variant="Variant.Outlined" Color="Color.Error" OnClick="() => RemoveTask(context.Id)">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" />
                        </MudButton>
                        <MudButton Disabled="!IsLogin || !context.Deleted" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => RestoreTask(context.Id)">
                            <MudIcon Icon="@Icons.Material.Filled.Restore" />
                        </MudButton>
                    </MudStack>
                </MudTd>

            </RowTemplate>
        </MudTable>


    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<SchoolTask> SchoolTasks { get; set; } = [];
    private bool IsLogin { get; set; } = false;
    private DateTime? DateFilter { get; set; }
    private bool Loading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        await Init();
        Refresh.OnChange += RefreshView;
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        IsLogin = authState.User.Identity?.IsAuthenticated ?? false;
        Loading = false;
        foreach (var item in SchoolTasks.Where(x => (x.Deadline.ToDateTime(TimeOnly.MinValue).Date - DateTime.Now.Date).TotalDays == 1))
        {
            var remainingHours = (item.Deadline.ToDateTime(TimeOnly.MinValue) - DateTime.Now).TotalHours;
            snackbar.Add($"Zbývá {remainingHours:F0} hodin na splnění úkolu: {item.Subject.TitleShort} - {item.Name}",
                         remainingHours <= 6 ? Severity.Error : Severity.Warning);
        }
    }

    private async Task RefreshView()
    {
        await Init();
        snackbar.Add("Data byla úspěšně obnovena", Severity.Info);
    }

    private async Task Init()
    {
        SchoolTasks = await TasksService.GetSchoolTasksAsync();
    }

    [Authorize]
    private async Task RemoveTask(Guid id)
    {
        Loading = true;
        await TasksService.DeleteTaskAsync(id);
        snackbar.Add("Zadání bylo úspěšně smazáno", Severity.Success);
        SchoolTasks = await TasksService.GetSchoolTasksAsync();
        await Refresh.CallRequestRefresh();
        Loading = false;
    }

    [Authorize]
    private async Task RestoreTask(Guid id)
    {
        Loading = true;
        await TasksService.RestoreTaskAsync(id);
        snackbar.Add("Zadání bylo úspěšně obnoveno", Severity.Success);
        SchoolTasks = await TasksService.GetSchoolTasksAsync();
        ShowHistoryActive = false;
        await Refresh.CallRequestRefresh();
        Loading = false;
    }

    private void EditTask(Guid id)
    {
        nav.NavigateTo($"/Edit/{id}");
    }

    private bool ShowHistoryActive { get; set; } = false;
    private async Task ShowHistory()
    {
        Loading = true;
        ShowHistoryActive = !ShowHistoryActive;
        if (ShowHistoryActive)
        {
            SchoolTasks = await TasksService.GetAllSchoolTasksAsync();
            Loading = false;
            return;
        }
        SchoolTasks = await TasksService.GetSchoolTasksAsync();
        Loading = false;
    }

    private async Task Filter(DateTime? dateTime)
    {
        Loading = true;
        DateFilter = dateTime;
        if (DateFilter is null)
        {
            SchoolTasks = await TasksService.GetSchoolTasksAsync();
            Loading = false;
            return;
        }
        SchoolTasks = await TasksService.GetSchoolTasksAsync(DateOnly.FromDateTime(DateFilter.Value));
        Loading = false;
    }
}
